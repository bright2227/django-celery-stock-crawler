"""
Django settings for crawl project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'nv!f7+@d0^cmj38ochve_+ib1pirui*more&q#7*a_x!$^cvm%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_celery_beat',
    'crawlers',
    'core'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crawl.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crawl.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# database connect for sqlalchemy
db_param = {'host':'postgres', # name inside the container
              'user': 'postgres', # username, maintenance
              'password': 'changeme',}
db_url = f"postgresql://{db_param['user']}:{db_param['password']}@{db_param['host']}:5432/"


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_param['user'],
        'USER': db_param['user'],
        'PASSWORD': db_param['password'],
        'HOST': db_param['host'],
        'PORT': '5432',
    }
}


# celery
from datetime import datetime, timedelta
from celery.schedules import crontab

CELERY_TIMEZONE = 'Asia/Taipei'
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BEAT_SCHEDULE = {

    # 'beat-2seconds-test': {
    #     'task': 'crawl.celery.add',
    #     'schedule': timedelta(seconds=15),
    #     'args': (5, 8)
    # },

    'test_beat_crawl_month_revenue_otc': {
        'task': 'crawlers.crawl_rev.request_month_revenue',
        'schedule': crontab(14, 13, day_of_month='29'),
        'args': (datetime.now().year, datetime.now().month, 'otc', 'non')
    },

    'test_beat_crawl_month_revenue_sii': {
        'task': 'crawlers.crawl_rev.request_month_revenue',
        'schedule': crontab(14, 13, day_of_month='29'),
        'args': (datetime.now().year, datetime.now().month, 'sii', 'non')
    },

    'test_beat_save_month_revenue': {
        'task': 'core.models.save_files',
        'schedule': crontab(15, 13, day_of_month='29'),
        'args': (2,4)
    },          

    'beat_crawl_month_revenue_otc': {
        'task': 'crawlers.crawl_rev.request_month_revenue',
        'schedule': crontab(0, 16, day_of_month='15'),
        'args': (datetime.now().year, datetime.now().month, 'otc', 'non')
    },

    'beat_crawl_month_revenue_sii': {
        'task': 'crawlers.crawl_rev.request_month_revenue',
        'schedule': crontab(0, 16, day_of_month='15'),
        'args': (datetime.now().year, datetime.now().month, 'sii', 'non')
    },

    'beat_save_month_revenue': {
        'task': 'core.models.save_files',
        'schedule': crontab(1, 16, day_of_month='28'),
        'args': (2,4)
    },      
}

